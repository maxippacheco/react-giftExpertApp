{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GiftExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","console","log","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GiftExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMAIaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAEZC,mBAAS,IAFG,mBAEzCC,EAFyC,KAE7BC,EAF6B,KA6BhD,OACI,sBAAMC,SArBW,SAACC,GAClBA,EAAEC,iBAIEJ,EAAWK,OAAOC,OAAS,IAE3BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OAGvCN,EAAc,KAMlBO,QAAQC,IAAI,iBAKZ,SACI,uBACIC,KAAM,OACNC,MAAUX,EAGVY,SAhCc,SAAAT,GAEtBF,EAAcE,EAAEU,OAAOF,a,+BCThBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEXC,EAFW,iDAEqCC,UAAUH,GAF/C,+DAKEI,MAAMF,GALR,cAKXG,EALW,gBAMMA,EAAKC,OANX,uBAMTC,EANS,EAMTA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAO,IAAD,EAExB,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAbzB,kBAkBVM,GAlBU,4CAAH,sDCCTO,EAAc,SAAC,GAAsB,IAArBb,EAAoB,EAApBA,IAAKU,EAAe,EAAfA,MAAOD,EAAQ,EAARA,GAKrC,OAFAlB,QAAQC,IAAIiB,EAAIC,EAAOV,GAGnB,sBAAKc,UAAW,yCAAhB,UACI,qBAAKC,IAAQf,EAAMgB,IAAQN,IAC3B,4BAAKA,QCLJO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECDX,SAACA,GAAc,IAAD,EACZhB,mBAAS,CAC/BuB,KAAM,GACNa,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAmBtC,OAXIC,qBAAU,WACNxB,EAAQC,GACHwB,MAAK,SAAAC,GACFH,EAAS,CACPf,KAAMkB,EACLL,SAAS,SAGzB,CAACpB,IAGGqB,EDbyBK,CAAa1B,GAAhCa,EALsB,EAK5BN,KAAca,EALc,EAKdA,QAGrB,OACI,qCACI,oBAAIJ,UAAW,qCAAf,SAAsDhB,IAErDoB,GAAW,mBAAGJ,UAAU,oCAAb,wBAEZ,qBAAKA,UAAY,YAAjB,SAGYH,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAGQA,GAFIA,EAAIC,aEjB/BgB,EAAgB,WAAM,MAKK3C,mBAAS,CAAC,aALf,mBAKxB4C,EALwB,KAKZ7C,EALY,KAgB/B,OACI,qCACE,+CACE,cAAC,EAAD,CAAaA,cAAkBA,IAE/B,uBAGA,6BAEQ6C,EAAWnB,KAAK,SAAAT,GAAQ,OAEvB,aADD,CACE,EAAD,CAEWA,SAAaA,GADLA,Y,MC9BxC6B,IAASC,OACP,cAAC,EAAD,IAEAC,SAASC,eAAe,W","file":"static/js/main.6c520756.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ( { setCategories } ) => {\r\n  \r\n    const [inputValue, setInputValue] = useState('');\r\n  \r\n    const handleInputChange = e => {\r\n        //el input value va a ser el ultimo valor que la persona escribio\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n\r\n        //validacion del submit\r\n\r\n        if (inputValue.trim().length > 2) {\r\n            //lo que hago es mandar el inputValue como la nueva categoria y mantener las categorias existentes\r\n            setCategories( cats => [inputValue, ...cats] );\r\n\r\n            //para que no se haga un doble posteo\r\n            setInputValue('');\r\n\r\n        }\r\n\r\n\r\n        \r\n        console.log('Submit hecho');\r\n    \r\n    }\r\n\r\n    return (\r\n        <form onSubmit = { handleSubmit }>\r\n            <input \r\n                type =\"text\"\r\n                value = { inputValue }\r\n                        \r\n                 //cada vez que el input cambie\r\n                onChange = { handleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","\r\n  export const getGifs = async(category) => {\r\n\r\n        const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=RidARRlSbBylHhXw399xU0dW1gz1ETQR`;\r\n\r\n        //peticion con async\r\n        const resp = await fetch(url);\r\n        const { data } = await resp.json();\r\n        \r\n        const gifs = data.map(img =>{\r\n            //hago un return de las propiedades que quiero\r\n            return{\r\n                id: img.id,\r\n                title: img.title,\r\n                url: img.images?.downsized_medium.url\r\n            }\r\n\r\n        })\r\n        \r\n        return gifs;\r\n    \r\n        \r\n    }   \r\n   ","import React from 'react'\r\n\r\nexport const GifGridItem = ({url, title, id}) => {\r\n   \r\n    //o desestructuras y pones ({id, title, url})\r\n    console.log(id, title, url);\r\n\r\n    return (\r\n        <div className ='card animate__animated animate__fadeIn'>\r\n            <img src = { url } alt = { title } />\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n//import { getGifs } from '../helpers/getGifs';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n   \r\n    \r\n    //const [images, setImages] = useState([]);\r\n\r\n    const {data: images, loading} = useFetchGifs(category);\r\n   \r\n\r\n    return (\r\n        <>\r\n            <h3 className= ' animate__animated animate__fadeIn'>{ category }</h3>\r\n\r\n            {loading && <p className=' animate__animated animate__flash'>Loading...</p>}\r\n\r\n            <div className = 'card-grid'>\r\n            \r\n                {\r\n                        images.map(img =>(\r\n                            <GifGridItem \r\n                                key = { img.id }\r\n                                //o img = { img }\r\n                                {...img}\r\n                            />\r\n                        ))\r\n                } \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n     //EL UseEffect lo usamos para que la peticion se dispare una sola vez\r\n    //le mandamos como segundo argumento las dependencias que es un arreglo vacio, es decir, el componente se ejecutara solo cuando es renderizado\r\n        useEffect(()=>{\r\n            getGifs(category)\r\n                .then(imgs => {\r\n                    setState({\r\n                      data: imgs,\r\n                       loading: false\r\n                  })\r\n             });\r\n    }, [category])\r\n\r\n\r\n    return state; // el objeto\r\n\r\n\r\n}\r\n\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n//crear componente GiftExpertApp\r\n//Es decir, el App\r\n\r\nexport const GiftExpertApp = () => {\r\n    \r\n    //creamos las categorias\r\n    //const categories = ['One punch', 'DBZ'];\r\n    \r\n    const [categories, setCategories] = useState(['Trending']);\r\n\r\n   /* const handleAdd = () =>{ */\r\n        /*Esto estaria mal ya que cambiamos el estado del componente y de pasar a ser un array queda en un string('naruto') */\r\n        // setCategories('Naruto');        \r\n        \r\n        //esto es usar este operador para mantener las categorias que ya estan y agregar la que queremos\r\n        /*\r\n        setCategories(cats => ['Naruto', ...cats])\r\n    }*/\r\n\r\n    return (\r\n        <>\r\n          <h2>GiftExpertApp</h2>  \r\n            <AddCategory setCategories = { setCategories } />\r\n\r\n            <hr/>\r\n\r\n\r\n            <ol>\r\n                { \r\n                    categories.map( category => (\r\n                    //la key sirve para que react sepa que elemento esta iterando\r\n                     <GifGrid \r\n                                key = { category }\r\n                                category = { category }\r\n                                \r\n                            />\r\n                        ))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GiftExpertApp } from './GiftExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  <GiftExpertApp />,\n\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}